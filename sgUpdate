#!/usr/bin/env bash

# shellcheck source=aws.functions
# shellcheck disable=SC1091
source "${0%/*}"/aws.functions
sgUpdateFilter="${0%/*}/sgUpdate.filter"
tagPrefix="user"
action=${1:-list}
if [[ ! $action =~ list ]] && [[ ! $action == update ]]; then
	echo ""
	echo "Usage: sgUpdate [ list | listall | update ]"
	echo ""
	echo -e "list\t List all ingress security group rules for your user"
	echo -e "listall\t List all ingress security groups"
	echo -e "update\t Update your users' security group rule with the current IP"
	echo ""
	exit 0
fi
current_ip=$(curl --silent http://checkip.amazonaws.com/)
iam_user=$(runAwsCommand iam --output text get-user --query User.UserName)
securityGroupsJson=$(runAwsCommand --output json ec2 describe-security-groups)

function updateRule() {
	local GroupId=$1
	local IpProtocol=$2
	local FromPort=$3
	local ToPort=$4
	local oldCidrIP=$5
	local newCidrIP=$6
	local Description=$7
	echo "Updating ${GroupId} ${IpProtocol}: ${FromPort} to ${ToPort} from $oldCidrIP to $newCidrIP ($Description)"
	runAwsCommand ec2 authorize-security-group-ingress \
		--group-id "$GroupId" \
		--ip-permissions IpProtocol="$IpProtocol",FromPort="$FromPort",ToPort="$ToPort",IpRanges=[\{CidrIp="$newCidrIP",Description=\""$Description"\"\}]
	runAwsCommand ec2 revoke-security-group-ingress \
		--group-id "$GroupId" \
		--ip-permissions IpProtocol="$IpProtocol",FromPort="$FromPort",ToPort="$ToPort",IpRanges=[\{CidrIp=\""${oldCidrIP}"\"\}]
}
function padTableSpaces() {
	fieldLength=$1
	maxFieldLength=$2
	for ((fieldPad = fieldLength; fieldPad <= maxFieldLength; fieldPad++)); do
		local fieldPadSpaces="$fieldPadSpaces "
	done
	echo "$fieldPadSpaces"
}
function ruleActionSelect() {
	local action=$1
	local GroupId=$2
	local GroupName=$3
	local IpProtocol=$4
	local FromPort=$5
	local ToPort=$6
	local oldCidrIP=$7
	local newCidrIP=$8
	local Description=$9
	local iam_user=${10}

	if [[ $action =~ list ]]; then
		local GroupIdSpaces && GroupIdSpaces=$(padTableSpaces ${#GroupId} 21)
		local GroupNameSpaces && GroupNameSpaces=$(padTableSpaces ${#GroupName} 10)
		local oldCidrIPSpace && oldCidrIPSpace=$(padTableSpaces ${#oldCidrIP} 21)
		if [[ $action == listall ]]; then
			echo -e "$GroupId$GroupIdSpaces\t$GroupName$GroupNameSpaces\t$IpProtocol\t$FromPort\t$ToPort\t$oldCidrIP$oldCidrIPSpace\t$Description"
		fi
		if [[ $action == list ]] && [[ $Description == "$tagPrefix:$iam_user" ]]; then
			if [[ $oldCidrIP != "$newCidrIP" ]]; then
				ipComment="(Need to update to $newCidrIP)"
			else
				ipComment="(No Update requirerd)"
			fi
			echo -e "$GroupId$GroupIdSpaces\t$GroupName$GroupNameSpaces\t$IpProtocol\t$FromPort\t$ToPort\t$oldCidrIP$oldCidrIPSpace\t$Description\t$ipComment"
		fi
	elif [[ $action == update ]] && [[ $iam_user == "${Description##*:}" ]] && [[ $current_ip != "${CidrIP%/*}" ]]; then
		updateRule "$GroupId" "$IpProtocol" "$FromPort" "$ToPort" "$CidrIP" "$current_ip"/"${CidrIP##*/}" "$Description"
	elif [[ $action == update ]] && [[ $iam_user == "${Description##*:}" ]] && [[ $current_ip == "${CidrIP%/*}" ]]; then
		echo "Keeping $GroupId$GroupIdSpaces $IpProtocol: $FromPort to $ToPort on $current_ip/${CidrIP##*/} ($Description)"
	fi
}

if command -v jq &>/dev/null && [[ -e $sgUpdateFilter ]]; then
	while IFS=$'\t' read -r GroupId GroupName IpProtocol FromPort ToPort CidrIP Description; do
		ruleActionSelect "$action" "${GroupId}" "$GroupName" "$IpProtocol" "$FromPort" "$ToPort" "${CidrIP%/*}" "$current_ip" "$Description" "$iam_user"
	done < <(echo "$securityGroupsJson" | jq -M -r -f $sgUpdateFilter)
else
	while IFS=$'\t' read -r GroupId; do
		while IFS=$'\t' read -r IpPermissionsCount; do
			for ((IpPermission = 0; IpPermission <= IpPermissionsCount; IpPermission++)); do
				while IFS=$'\t' read -r IpProtocol FromPort ToPort IpRangesCount; do
					for ((IpRange = 0; IpRange <= IpRangesCount; IpRange++)); do
						while IFS=$'\t' read -r CidrIP Description; do
							ruleActionSelect "$action" "$GroupId" "$GroupName" "$IpProtocol" "$FromPort" "$ToPort" "${CidrIP%/*}" "$current_ip" "$Description" "$iam_user"
						done < <(runAwsCommand--output text ec2 describe-security-groups \
							--group-ids "${GroupId}" \
							--query "SecurityGroups[*].IpPermissions[${IpPermission}].IpRanges[${IpRange}]")
					done
				done < <(runAwsCommand --output text ec2 describe-security-groups \
					--group-ids "${GroupId}" \
					--query "SecurityGroups[*].IpPermissions[${IpPermission}].[IpProtocol,FromPort,ToPort,length(IpRanges[*])]")
			done
		done < <(runAwsCommand --output text ec2 describe-security-groups \
			--group-ids "${GroupId}" \
			--query "SecurityGroups[?IpPermissions[?IpRanges[*]]].[length(IpPermissions[*])]")
	done < <(runAwsCommand --output text ec2 describe-security-groups \
		--query "SecurityGroups[?IpPermissions[?IpRanges[?Description!=\`null\`]|[?starts_with(Description \`$tagPrefix\`)]]].[GroupId]")
fi
