#!/usr/bin/env bash
# shellcheck disable=SC2086,SC2102
# Quotes and aws command do not mix well
# shellcheck source=./aws.functions
source ${0%/*}/aws.functions
# shellcheck source=./ecLaunch.vars
VARS=${0%/}.vars
source $VARS
if [[ -e $VARS.local ]] ; then
  source $VARS.local
fi
if [[ -e $HOME/.aws-tools/${VARS##*/}.local ]] ; then
  source $HOME/.aws-tools/${VARS##*/}.local
fi

# Usage output
usage() {
  echo "Usage: ${BASH_SOURCE[0]} [ -t | --type INSTANCETYPE ] [ -o | --owner OWNERTAG ] [ -p | --project PROJECT] [ -a | --ami AMI ]
        If unspcified:
        INSTANCETYPE is r5d.large
        OWNERTAG is iam user
        AMI is the default Amazon Linux AMI"
  exit 2
}

# A Hack for MacOS incompatible getop
if command -v sw_vers ; then 
	if [[ $(sw_vers -productName) == macOS ]] ; then
		if [[ -d /usr/local/opt/gnu-getopt/bin ]] ; then
			 PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
  		else
    			echo you need to install gnu getopt
    			exit 1
  		fi
	fi
fi

# Get and check parameters
ARGS=$(getopt --name ec2launch \
              --options 't:o:p:a:' \
              --longoptions 'type:,owner:,project:,ami:' -- "$@")

VALID_ARGUMENTS="$?"
if [[ "$VALID_ARGUMENTS" -gt "0" ]]; then
  usage
fi
eval "set -- $ARGS"
while true; do
    case $1 in
      -t|--type)
            INSTANCETYPE=${2}; shift 2;;
      -o|--owner)
            OWNERTAG=$2; shift 2;;
      -p|--project)
            PROJECT=$2; shift 2;;
      -a|--ami)
            IMAGEID=$2; shift 2;;
      --)  shift; break;;
      *)   echo "option $1 is unknown" ; usage; exit 1;;           # error
    esac
done

# Get a subnet to use
SUBNETCOUNTER=0
SUBNETCOUNTERMAX=$(runAwsCommand ec2 describe-subnets \
          --output text \
          --filters Name=tag:$SUBNETTAGNAME,Values=$SUBNETTAGVALUE \
          --query Subnets[].[SubnetId] | wc -l)
SUBNETNUM=$((1 + RANDOM % SUBNETCOUNTERMAX))
while IFS=$'\t' read -r SUBNETID; do
  ((SUBNETCOUNTER  = SUBNETCOUNTER  + 1))
  if [[ $SUBNETCOUNTER  -eq $SUBNETNUM ]] ; then
    break
  fi
done < <(runAwsCommand ec2 describe-subnets \
          --output text \
          --filters Name=tag:$SUBNETTAGNAME,Values=$SUBNETTAGVALUE \
          --query Subnets[].[SubnetId])

# Get IAM user          
if [[ -z $OWNERTAG ]] ; then
  OWNERTAG=$(runAwsCommand iam get-user \
            --output text \
            --query User.UserName)
fi

# Get up-to-date Amazon Linux image id
if [[ -z $IMAGEID ]]; then
  case  ${INSTANCETYPE%.*} in
    t4g|m6g|a1|c7g|c6g|c6gn|r6g|x2gd|im4gn|is4gen)
      echo "Launching arm64 Instance"
      IMAGEID=$(runAwsCommand ssm get-parameters \
        --names /aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id \
        --query "Parameters[0].Value")
      ;;
    p4|p3|p2|g5|g5dn|g3)
      # X86 + GPU
      echo "Launching x86_64 with GPU Instance"
      IMAGEID=$(runAwsCommand ssm get-parameters \
        --names /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id \
        --query "Parameters[0].Value")
      ;;
    f1)
      #FPGA
      echo "No Ami for FPGA"
      ;;
    vt1)
      #Media accelerator
      echo "No Ami for media accelerator"
      ;;
    g5ad)
      #AMD GPU
      echo "No AMI for AMD GPU"
      ;;
    g5g)
      # ARM + GPU
      echo "No AMI for arm64 and GPU"
     ;;
    dl1|trn1|inf1)
      # AWS ML chips
      echo "Launching Inferna Instance"
      IMAGEID=$(runAwsCommand ssm get-parameters \
        --names /aws/service/ecs/optimized-ami/amazon-linux-2/inf/recommended/image_id \
        --query "Parameters[0].Value")
      ;;
    *)
      echo "Launching x86_64 AMI"
      IMAGEID=$(runAwsCommand ec2 describe-images \
          --owners amazon \
          --filters 'Name=name,Values=amzn2-ami-hvm-2.0.????????.?-x86_64-gp2' 'Name=state,Values=available' \
          --query 'reverse(sort_by(Images,&CreationDate))[:1].[ImageId]')
      ;;
  esac
fi
if [[ -n $LAUNCHTEMPLATEVERSION ]]; then
  LAUNCHTEMPLATEVERSION=",Version=$LAUNCHTEMPLATEVERSION"
fi

runAwsCommand ec2 run-instances \
  --launch-template LaunchTemplateId=${LAUNCHTEMPLATE}${LAUNCHTEMPLATEVERSION} \
  --image-id $IMAGEID \
  --instance-type $INSTANCETYPE \
  --network-interfaces AssociatePublicIpAddress=true,DeviceIndex=0,SubnetId=$SUBNETID \
  --tag-specifications \
  	"ResourceType=instance,Tags=[{Key=Name,Value=$NAMEPREFIX-$OWNERTAG},{Key=Creator,Value=$OWNERTAG},{Key=Owner,Value=$OWNERTAG},{Key=Project,Value=$PROJECT}$MORETAGS]" \
  	"ResourceType=volume,Tags=[{Key=Name,Value=$NAMEPREFIX-$OWNERTAG},{Key=Owner,Value=$OWNERTAG},{Key=Project,Value=$PROJECT}$MORETAGS]" \
  --query Instances[*].[InstanceId] 
