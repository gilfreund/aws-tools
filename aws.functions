#!/usr/bin/env bash
# vim:ft=sh

# Add jitter to the aws command to avoid a situation where it might fail to API throttoling 
# and returning 429 Too Many Requests 
# see https://docs.aws.amazon.com/AWSEC2/latest/APIReference/throttling.html
# and https://docs.aws.amazon.com/general/latest/gr/api-retries.html
if [[ -z $AWSBASE ]] ; then
	AWSBASE=$(command -v /usr/local/bin/aws || \
		command -v "$CONDA_PREFIX"/envs/aws/bin/aws || \
		command -v "$CONDA_PREFIX"/bin/aws || \
		command -v /usr/bin/aws || \
		command -v aws)
	export AWSBASE
else
        echo "aws command not found. Install aws-cli package"
        exit 1
fi

if [[ -z $AVAILABILITY_ZONE ]]; then 
	AVAILABILITY_ZONE=$(curl \
                --connect-timeout 1 \
                --silent http://169.254.169.254/latest/meta-data/placement/availability-zone)
	export AVAILABILITY_ZONE
fi

if [[ -n $AVAILABILITY_ZONE ]]; then 
        export AZ_REGION=${AVAILABILITY_ZONE:0:9}
else
        export AZ_REGION=eu-west-1
fi

export AWSCMD="$AWSBASE --region $AZ_REGION --output text"

function runAwsCommand () {
        local runCmd="$*"
        local runJitter=0
        local runCycle=0
        local maxCycles=30
        local runSuccessful="No"
        while [[ $runSuccessful != "Yes" ]] && [[ $runCycle -le $maxCycles ]]; do 
            # shellcheck disable=SC2086
            if ! $AWSCMD $runCmd 2> /dev/null; then 
                    local runCycle=$(( runCycle + 1 ))
                    local runJitter=$(( RANDOM  % runCycle ))
                    sleep $(( ( RANDOM % runCycle ) + runJitter ))
            else
                    local runSuccessful="Yes"
            fi
        done
        if [[ $runSuccessful != "Yes" ]] && [[ $runCycle -ge $maxCycles ]]; then
            echo "failed to excute:"
            echo "aws $runCmd"
            exit 1
        fi
}